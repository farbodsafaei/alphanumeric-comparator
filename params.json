{
  "name": "alphanumeric-comparator",
  "tagline": "An alphanumeric comparator in Java to simplify comparison and sorting of strings in a more human readable format",
  "body": "# alphanumeric-comparator [![Build Status](https://travis-ci.org/farbodsafaei/alphanumeric-comparator.svg?branch=master)](https://travis-ci.org/farbodsafaei/alphanumeric-comparator)\r\n\r\nAn alphanumeric comparator in Java, for comparing and sorting strings in a more human readable format. It uses a combination of numeric and alphabetic comparisons to compare two strings. This class uses standard Java classes and is independent of any 3rd party libraries.\r\n\r\nAdditionally this comparator uses ```java.text.Collator``` class to correctly sort strings containing special characters like Umlauts or similar alphabet letters in different languages, such as: **å**, **è**, **ü**, **ö**, **ø**, or **ý**.\r\n\r\n#### Example #1\r\nFor given list of strings:\r\n- file-01.doc\r\n- file-2.doc\r\n- file-03.doc\r\n\r\nA regular lexicographical sort, e.g. ```java.util.Collections.sort()```, sorts the above list in the following order:\r\n\r\n**[file-01.doc, file-03.doc, file-2.doc]**\r\n\r\nHowever using ```AlphaNumericComparator```, the list will be sorted in a more meaningful and readable way:\r\n\r\n**[file-01.doc, file-2.doc, file-03.doc]**\r\n\r\n#### Example #2\r\nFor the following list of characters/strings: \r\n * b\r\n * e\r\n * k\r\n * ě\r\n * f\r\n * è\r\n * g\r\n\r\nA regular lexicographical sort, e.g. ```java.util.Collections.sort()```, sorts the above list in the following order:\r\n\r\n**```b, e, f, g, k, è, ě```**\r\n\r\nUsing ```AlphaNumericComparator```, the list is correctly sorted as below:\r\n\r\n**```b, e, è, ě, f, g, k```**\r\n\r\n#### Example #3\r\nConsider the following unsorted list of words:\r\n\r\n**```sèle, solo, solè, sola, soli, sole, sold, sila, silè, sölo, sulo, sylo, soly```**\r\n\r\nUsing Java ```Collections.sort()``` we will have:\r\n\r\n**```sila, silè, sola, sold, sole, soli, solo, soly, solè, sulo, sylo, sèle, sölo```**\r\n\r\nHowever with ```AlphaNumericComparator``` sort we will have a more accurate sorted list:\r\n\r\n**```sèle, sila, silè, sola, sold, sole, solè, soli, solo, soly, sölo, sulo, sylo```**\r\n\r\n#### How To\r\n\r\nSimply pass the comparator as a parameter when sorting a list of strings:\r\n```java\r\nList<String> list = new ArrayList<String>();\r\nlist.add(\"some string\");\r\nlist.add(\"some other string\");\r\n...\r\nlist.sort(new AlphaNumericComparator());\r\n```\r\nor just simply use the ```compare()``` method in ```AlphaNumericComparator``` if needed to compare two strings.\r\n \r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}